// SPDX-License-Identifier: AGPL-3.0-only
// slither-disable-start reentrancy-benign

pragma solidity 0.8.26;

import {Script} from "forge-std/Script.sol";
import {SharedGovernorConstants} from "script/SharedGovernorConstants.sol";
import {GovernorUpgradeable} from "openzeppelin-upgradeable/governance/GovernorUpgradeable.sol";
import {AccessControlUpgradeable} from "openzeppelin-upgradeable/access/AccessControlUpgradeable.sol";

contract SubmitUpgradeProposal is Script, SharedGovernorConstants {
  address PROPOSER = 0x1B686eE8E31c5959D9F5BBd8122a58682788eeaD; // L2Beat

  function proposeUpgradeAndReturnCalldata(address _timelock, address _currentGovernor, address _newGovernor)
    public
    returns (
      address[] memory targets,
      uint256[] memory values,
      bytes[] memory calldatas,
      string memory description,
      uint256 _proposalId
    )
  {
    targets = new address[](1);
    values = new uint256[](1);
    calldatas = new bytes[](1);
    description = "Upgrade timelock roles";

    bytes memory sampleData =
      hex"928c169a000000000000000000000000e6841d92b0c345144506576ec13ecf5103ac7f49000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c401d5062a000000000000000000000000a723c008e76e379c55599d2e4d93879beafda79c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000006fa14163ce89ece2936ccf996408ac1ec19a02a6971a2e90324967f67f8a11cb000000000000000000000000000000000000000000000000000000000003f48000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000004dbd4fc535ac27206064b68ffcf827b0a60bab3f000000000000000000000000cf57572261c7c2bcf21ffd220ea7d1a27d40a82700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e41cff79cd000000000000000000000000c7183455a4c133ae270771860664b6b7ec320bb1000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000648dcb915600000000000000000000000034d45e99f7d8c45ed05b5ca72d54bbd1fb3f98f0000000000000000000000000f07ded9dc292157749b6fd268e37df6ea38395b900000000000000000000000013398e151530abdf387d8a1fa4c3a75ec355cc4d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    targets[0] = ARB_SYS;
    // TODO: Write the calldata for the ArbSys.sendTxToL1 call
    // calldatas[0] = abi.encodeWithSelector(ArbSys.sendTxToL1.selector, abi.encodeWithSelector("TODO"));
    calldatas[0] = sampleData;
    vm.startBroadcast(PROPOSER);
    _proposalId = GovernorUpgradeable(payable(_currentGovernor)).propose(targets, values, calldatas, description);
    vm.stopBroadcast();
  }
}

interface ArbSys {
  function sendTxToL1(address destination, bytes memory calldataData) external payable;
}
